/**
 */
package diet_mdse_reserach.provider;

import diet_mdse_reserach.util.Diet_mdse_reserachAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Diet_mdse_reserachItemProviderAdapterFactory extends Diet_mdse_reserachAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Diet_mdse_reserachItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.DietRecommendationSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DietRecommendationSystemItemProvider dietRecommendationSystemItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.DietRecommendationSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDietRecommendationSystemAdapter() {
		if (dietRecommendationSystemItemProvider == null) {
			dietRecommendationSystemItemProvider = new DietRecommendationSystemItemProvider(this);
		}

		return dietRecommendationSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Patient} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatientItemProvider patientItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Patient}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatientAdapter() {
		if (patientItemProvider == null) {
			patientItemProvider = new PatientItemProvider(this);
		}

		return patientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Nutritionist} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NutritionistItemProvider nutritionistItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Nutritionist}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNutritionistAdapter() {
		if (nutritionistItemProvider == null) {
			nutritionistItemProvider = new NutritionistItemProvider(this);
		}

		return nutritionistItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Appointment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppointmentItemProvider appointmentItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Appointment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppointmentAdapter() {
		if (appointmentItemProvider == null) {
			appointmentItemProvider = new AppointmentItemProvider(this);
		}

		return appointmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Payment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaymentItemProvider paymentItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Payment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaymentAdapter() {
		if (paymentItemProvider == null) {
			paymentItemProvider = new PaymentItemProvider(this);
		}

		return paymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Doctor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoctorItemProvider doctorItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Doctor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoctorAdapter() {
		if (doctorItemProvider == null) {
			doctorItemProvider = new DoctorItemProvider(this);
		}

		return doctorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Medicine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MedicineItemProvider medicineItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Medicine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMedicineAdapter() {
		if (medicineItemProvider == null) {
			medicineItemProvider = new MedicineItemProvider(this);
		}

		return medicineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.RandomForest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomForestItemProvider randomForestItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.RandomForest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomForestAdapter() {
		if (randomForestItemProvider == null) {
			randomForestItemProvider = new RandomForestItemProvider(this);
		}

		return randomForestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.PredictedDietplan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredictedDietplanItemProvider predictedDietplanItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.PredictedDietplan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredictedDietplanAdapter() {
		if (predictedDietplanItemProvider == null) {
			predictedDietplanItemProvider = new PredictedDietplanItemProvider(this);
		}

		return predictedDietplanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.K_means} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected K_meansItemProvider k_meansItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.K_means}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createK_meansAdapter() {
		if (k_meansItemProvider == null) {
			k_meansItemProvider = new K_meansItemProvider(this);
		}

		return k_meansItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Dataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetItemProvider datasetItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Dataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetAdapter() {
		if (datasetItemProvider == null) {
			datasetItemProvider = new DatasetItemProvider(this);
		}

		return datasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.SupportVectorMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportVectorMachineItemProvider supportVectorMachineItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.SupportVectorMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportVectorMachineAdapter() {
		if (supportVectorMachineItemProvider == null) {
			supportVectorMachineItemProvider = new SupportVectorMachineItemProvider(this);
		}

		return supportVectorMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.Symptoms} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymptomsItemProvider symptomsItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.Symptoms}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymptomsAdapter() {
		if (symptomsItemProvider == null) {
			symptomsItemProvider = new SymptomsItemProvider(this);
		}

		return symptomsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diet_mdse_reserach.PerformanceMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformanceMetricItemProvider performanceMetricItemProvider;

	/**
	 * This creates an adapter for a {@link diet_mdse_reserach.PerformanceMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformanceMetricAdapter() {
		if (performanceMetricItemProvider == null) {
			performanceMetricItemProvider = new PerformanceMetricItemProvider(this);
		}

		return performanceMetricItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (dietRecommendationSystemItemProvider != null)
			dietRecommendationSystemItemProvider.dispose();
		if (patientItemProvider != null)
			patientItemProvider.dispose();
		if (nutritionistItemProvider != null)
			nutritionistItemProvider.dispose();
		if (appointmentItemProvider != null)
			appointmentItemProvider.dispose();
		if (paymentItemProvider != null)
			paymentItemProvider.dispose();
		if (doctorItemProvider != null)
			doctorItemProvider.dispose();
		if (medicineItemProvider != null)
			medicineItemProvider.dispose();
		if (randomForestItemProvider != null)
			randomForestItemProvider.dispose();
		if (predictedDietplanItemProvider != null)
			predictedDietplanItemProvider.dispose();
		if (k_meansItemProvider != null)
			k_meansItemProvider.dispose();
		if (datasetItemProvider != null)
			datasetItemProvider.dispose();
		if (supportVectorMachineItemProvider != null)
			supportVectorMachineItemProvider.dispose();
		if (symptomsItemProvider != null)
			symptomsItemProvider.dispose();
		if (performanceMetricItemProvider != null)
			performanceMetricItemProvider.dispose();
	}

}
